{"version":3,"sources":["component/Credential.js","component/TransferFund.js","util/api.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Credential","props","useState","Date","className","Alert","variant","dismissible","Table","striped","bordered","toDateString","colSpan","NotifyBackMomoApproval","Modal","size","aria-labelledby","centered","Header","closeButton","Title","id","Body","processing","Spinner","animation","price","number","Footer","Button","onClick","onHide","TransferFund","tel","setTel","setError","setProcessing","amount","setAmount","name","rating","currency","setCurrency","currencyList","setCurrencyList","modalShow","setModalShow","useEffect","succeed","Promise","resolve","reject","setTimeout","data","status","getCurrencies","then","res","catch","err","fail","class","onChange","e","target","value","show","Form","Row","Col","Group","controlId","Label","Control","placeholder","InputGroup","DropdownButton","as","Prepend","title","map","elt","key","Dropdown","Item","href","FormControl","aria-describedby","style","alignItems","alignSelf","disabled","role","aria-hidden","body","_email","_tel","_amount","console","log","submitExchange","setCreds","App","creds","src","logo","alt","width","height","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.ca8061e9.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Modal, Button, Spinner, Table, Alert } from 'react-bootstrap'\nexport default function Credential(props) {\n    const [ cvv, setCvv] = useState(0)\n    const [ name , setName] = useState(\"harisu\")\n    const [ expires, setExpire] = useState( new Date());\n\n    return (\n        <div className=\"container\">\n            <Alert variant=\"success\" dismissible>\n                Success!!! Thank you for trusting us\n            </Alert>\n            <p>  Use the following Card details from momouniverse to purchase online </p>\n            <Table striped bordered  className=\"site-primary-color\">\n            <thead>\n                <tr>\n                    <th>#</th>\n                    <th>First Name</th>\n                    <th>Last Name</th>\n                    <th>CVV</th>\n                    <th>Expire on</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>1</td>\n                    <td>Harisu</td>\n                    <td>Fanyui</td>\n                    <td>212</td>\n                    <td>{new Date().toDateString()}</td>\n                </tr>\n                <tr>\n                    <td>2</td>\n                    <td>MoMo</td>\n                    <td>Univers</td>\n                    <td>009</td>\n                    <td>{new Date().toDateString()}</td>\n                </tr>\n                <tr>\n                    <td>3</td>\n                    <td colSpan=\"2\">One man army</td>\n                    <td>520</td>\n                    <td>{new Date().toDateString()}</td>\n                </tr>\n                \n            </tbody>\n</Table>\n<div className=\"pull-right\"> Download</div>\n        </div>\n    )\n}\n\n\nexport function NotifyBackMomoApproval(props) {\n    return (\n        <Modal\n            {...props}\n            size=\"lg\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n        >\n            <Modal.Header closeButton>\n                <Modal.Title id=\"contained-modal-title-vcentern\" className=\"site-primary-color\">\n                    Notificatio for Payment\n        </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <h4>MoMo payment innitiated</h4> {props.processing &&<Spinner animation=\"border\" />}\n                <p>\n                 Dail,<code>*126#</code> To approve the transaction of {props.price} FCFA on the number {props.number},\n        </p>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"info\" onClick={props.onHide} className=\"site-primary-color\">Close</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}","import React, { useState, useEffect } from 'react'\nimport { Row, Col, Form, Button, InputGroup, Dropdown, DropdownButton,FormControl, Spinner  } from 'react-bootstrap'\nimport Credential, {NotifyBackMomoApproval} from './Credential'\n\n//importing functions to make request.\nimport { getInnitialData, submitExchange, getCurrencies} from '../util/api'\nimport { Z_STREAM_ERROR } from 'zlib'\nfunction TransferFund(props) {\n    const [tel, setTel] = useState(0)\n    const [err, setError] = useState(false)\n    const [processing, setProcessing] = useState(false)\n    const [amount, setAmount] = useState(0)\n    const [currency, setCurrency] = useState({name:\"USD\", rating: 1.5})\n    const [currencyList, setCurrencyList ] = useState([])\n    //displays the modal notifying the user for approving mobildmoney transaction\n    const [modalShow, setModalShow] = useState(false);\n\n    useEffect(() => {\n        getCurrencies().then((res) => \n            setCurrencyList(res.data) //pupulate the state witht he response data\n        )\n        .catch((err) => {\n            setError(err.data.fail) //set errors to state\n        })\n    }, [])\n    useEffect(() => {\n        getInnitialData(1)\n        //fetch(\"url\",)\n        // return new Promise((resolve, reject) => {\n        //     setTimeout(() => resolve({data: {name: \"harisu\", class: \"not a student\"}}),1000)\n        // })\n    }, [])\n   const onChange = (e) => {\n        if(e.target.name === \"tel\"){\n            setTel(e.target.value)\n        } \n        else if(e.target.name === \"amount\"){\n            setAmount(e.target.value)\n        } \n\n    }\n    const submit = () => {\n        const body = { \n            _email: 'fanyuiharisu@gmail.com',\n            _tel: 675955931,\n            _amount: amount* currency.rating,\n    \n        }\n        setModalShow(true) //show the modal displaying the approval via momo\n        setProcessing(true)\n        console.log(\"submitting the values\")\n        submitExchange(1, body)\n        .then((res)=> {\n            console.log(\"response is\", res)\n            setProcessing(false)\n            setModalShow(false) //close the modal as the transactio is successfull\n            props.setCreds();\n        })\n        .catch((err) => {\n            setProcessing(false)\n            setModalShow(false) //close the modal as the transactio is successfull\n\n            console.log(\"error \", err)\n        })\n\n    }\n    const processform = () => {\n        setProcessing(true)\n        let totalamount = currency.rating * amount;\n\n        console.log(\"the total amount is \", totalamount);\n    }\n\n    return (\n        <div className=\"container\">\n            <NotifyBackMomoApproval\n                processing={processing}\n                price={amount*currency.rating}\n                number={tel}\n                show={modalShow}\n                onHide={() => setModalShow(false)}\n            />\n            <Form>\n                <Row>\n                    <Col> \n\n                        <Form.Group controlId=\"tel\">\n                          <Form.Label> Telephone </Form.Label>\n                          <Form.Control onChange={onChange} name=\"tel\" placeholder=\"Telephone\" />\n                        </Form.Group>\n                        <InputGroup className=\"mb-3\">\n                            <DropdownButton\n                                as={InputGroup.Prepend}\n                                variant=\"outline-secondary\"\n                                title={currency.name}\n                                id=\"currency-dropdown\"\n                            >\n                                {\n                                    currencyList.map((elt, key) => <Dropdown.Item key= {key} onClick={()=> setCurrency(elt)} href=\"#\"> {elt.name} </Dropdown.Item> )\n                                }\n                            </DropdownButton>\n                            <FormControl name=\"amount\" onChange={onChange} aria-describedby=\"basic-addon1\" />\n                        </InputGroup>\n                    </Col>\n                    <Col style={{alignItems: \"flex-end \", alignSelf: \"flex-end\"}}>\n                       <div className=\" container center\">\n                        <InputGroup>\n\n                       <Form.Label> You will be charged the sum of</Form.Label> \n                       </InputGroup>\n                        <InputGroup>\n                        <br /> <br />\n                       <Form.Label> {amount * currency.rating} FCFA from the number {tel}</Form.Label> \n                       </InputGroup>\n                       </div> \n\n                    </Col>\n                </Row>\n            </Form>\n            <p>Here we tranfer fund</p>\n            {!processing ? <Button className=\"site-primary-color\" onClick={submit}>Submit</Button> \n                : <Button variant=\"primary\" disabled>\n                    <Spinner\n                        as=\"span\"\n                        animation=\"grow\"\n                        size=\"sm\"\n                        role=\"status\"\n                        aria-hidden=\"true\"\n                    />\n                    Loading...\n                </Button>\n            }\n        </div>\n    )\n}\nexport default TransferFund;","import helper from './helper'\nconst url = 'https://somedummybackend'\nconst momourl =\"https://developer.mtn.cm/OnlineMomoWeb/faces/transaction/transaction.xhtm\"\n//make an api call and provide content to the ui\nexport function getInnitialData(page) {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => resolve({ data: { name: \"harisu\", class: \"not a student\" } }), 1000)\n\n    })\n    // return helper.get(url)\n    //     .then((response) => response.json())\n}\nexport function submitExchange(succeed = 1, body = {}){\n    // return helper.post(momourl, body)\n    //     .then((response) => response.json())\n    return new Promise((resolve, reject) => {\n        if (succeed == 1)\n         setTimeout(() => resolve({ data: { name: \"Exchange complet\", status: \"success\" } }), 10000)\n        else{\n            setTimeout(() => reject({ data: { name: \"Exchange failed\", status: \"fail\" } }), 10000)\n\n        }\n    })\n}\n\n//get the list of supported currencies from the api\nexport function getCurrencies(succeed = 1){\n    return new Promise((resolve, reject) => {\n        if (succeed === 1)\n            setTimeout(() => resolve({ data: [{ name: \"USD\", rating: 1.5 }, { name: \"FCFA\", rating: 0.75 }, { name: \"NAIRA\", rating: 5 }, { name: \"YERN\", rating: 1.1 }] }), 1000)\n        else{\n            setTimeout(() => reject({ data: { name: \"Exchange failed\", status: \"fail\" } }), 1000)\n\n        }\n    })\n}","import React, { Fragment, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TransferFund from './component/TransferFund'\nimport Credential from './component/Credential'\n\nfunction App() {\n  const [creds, setCreds] = useState(false)\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\"><div>\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <img src=\"https://developer.mtn.cm/OnlineMomoWeb/console/uses/itg_img/buttons/MOMO_buy_now_EN.jpg\" className=\"App-logo\" alt=\"logo\" style={{width : '200px', height: '100px'}}/>\n\n      </div>\n        {creds ? <Credential /> : <Fragment >\n        <p>\n          Welcome to momouniverse, here we exchange your momo with equivalent in any currency for your online activities <br />\n          <code>Greate to have you on board</code>\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Get Started Today\n        </a>\n          <TransferFund setCreds={() => setCreds(true)} />\n        </Fragment>\n      }\n      </header>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";"],"sourceRoot":""}